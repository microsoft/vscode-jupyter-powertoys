{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "additionalProperties": false,
    "description": "For more information, see\nhttps://jupyter-client.readthedocs.io/en/stable/kernels.html#kernel-specs",
    "id": "https://jupyter.org//kernel.json",
    "properties": {
      "argv": {
        "description": "A list of command line arguments used to start the kernel. The text {connection_file} in any argument will be replaced with the path to the connection file.",
        "type": "array",
        "items": {
          "type": "string"
        },
        "default": [
          "python",
          "-m",
          "ipykernel_launcher",
          "-f",
          "{connection_file}"
        ]
      },
      "display_name": {
        "description": "The kernel's name as it should be displayed in the UI. Unlike the kernel name used in the API, this can contain arbitrary unicode characters.",
        "type": "string"
      },
      "env": {
        "description": "A dictionary of environment variables to set for the kernel. These will be added to the current environment variables before the kernel is started. Existing environment variables can be referenced using",
        "type": "object"
      },
      "interrupt_mode": {
        "description": "May be either signal or message and specifies how a client is supposed to interrupt cell execution on this kernel, either by sending an interrupt signal via the operating system's signalling facilities (e.g. SIGINT on POSIX systems), or by sending an interrupt_request message on the control channel. If this is not specified the client will default to signal mode. See Kernel interrupt\nhttps://jupyter-client.readthedocs.io/en/stable/messaging.html#msging-interrupt",
        "type": "string",
        "enum": ["signal", "message"],
        "default": "signal"
      },
      "language": {
        "description": "The name of the language of the kernel. When loading notebooks, if no matching kernelspec key (may differ across machines) is found, a kernel with a matching language will be used. This allows a notebook written on any Python or Julia kernel to be properly associated with the user's Python or Julia kernel, even if they aren't listed under the same name as the author's.",
        "type": "string",
        "default": "python"
      },
      "metadata": {
        "description": "A dictionary of additional attributes about this kernel; used by clients to aid in kernel selection. Metadata added here should be namespaced for the tool reading and writing that metadata.",
        "type": "object"
      }
    },
    "required": ["argv", "language", "display_name"],
    "title": "JSON schema for Jupyter Kernel Specification file",
    "type": "object"
  }
